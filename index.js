
let ctx = document.getElementById('myChart').getContext('2d');
let ctx2 = document.getElementById('myChart2').getContext('2d');
let ctx3 = document.getElementById('myChart3').getContext('2d');
let dataset = '';
let work_interfere = '';
let work_interfereTotals = [];
let treatment = '';
let treatmentTotals = [];
let mental_hc = '';
let mental_hcTotals = [];
let selectedFile = document.getElementById('input').files[0];

input.addEventListener('change', 
function() {
    selectedFile = document.getElementById('input').files[0];
    console.log(selectedFile);
    
    Papa.parse(selectedFile, {
        complete: function(results) {
            //console.log(results.data[0]);
            dataset = results.data;
            console.log(dataset);
            // col data
            treatment = grabColByIndex(dataset, 6);
            work_interfere = grabColByIndex(dataset, 7);
            console.log(treatment, work_interfere);

            // treatment totals
            let treatmentDistinct = getDistinct(treatment);
            treatmentTotals = countDistinct(treatmentDistinct,treatment);
            console.log(treatmentTotals);
            let chart_title_treatment = 'Have you sought treatment for a mental health condition?';
            createBarChart(chart_title_treatment, treatmentDistinct, [treatmentTotals[0].length, treatmentTotals[1].length]);
            //createDoughnutChart(treatmentDistinct, [treatmentTotals[0].length, treatmentTotals[1].length]);

            // work_interfere totals
            let work_interfereDistinct = getDistinct(work_interfere);
            work_interfereTotals = countDistinct(work_interfereDistinct, work_interfere);
            let chart_title_work = 'If you have a mental health condition, do you feel that it interferes with your work?';
            //createBarChart(chart_title_work, work_interfereDistinct, [work_interfereTotals[0].length, work_interfereTotals[1].length, work_interfereTotals[2].length, work_interfereTotals[3].length]);
            createHorizBarChart(chart_title_work, work_interfereDistinct, [work_interfereTotals[0].length, work_interfereTotals[1].length, work_interfereTotals[2].length, work_interfereTotals[3].length]);

            //filtering data
            let filter_treatmentYes = filterDataBy(dataset, 6, 'Yes');
            //console.log(filter_treatmentYes);
            let filter_treatmentYes_workOften = filterDataBy(filter_treatmentYes, 7, 'Often');
            console.log(filter_treatmentYes_workOften);

            // mental_health_consequence totals
            mental_hc = grabColByIndex(filter_treatmentYes_workOften, 17);
            //console.log(mental_hc);
            let mentalDistinct = getDistinct(mental_hc);
            mental_hcTotals = countDistinct(mentalDistinct, mental_hc);
            console.log(mental_hcTotals);
            let chart_title_mental = 'Do you think that discussing a mental health issue with your employer would have negative consequences?'
            createDoughnutChart(chart_title_mental, mentalDistinct, [mental_hcTotals[0].length, mental_hcTotals[1].length, mental_hcTotals[2].length]);
        }
    })
    //console.log(dataset[0]);
    //return dataset;
});

let myPatterns1 = pattern.generate([
    "rgba(255, 99, 132, 0.8)",
    "rgba(0,0,0, 0.2)"
    //"rgba(54, 162, 235, 0.4)"
  ]);

  let myPatterns2 = pattern.generate([
    "rgba(255, 99, 132, 0.8)",
    "rgba(0,0,0, 0.2)",
    "rgba(0,0,0, 0.4)",
    "rgba(0,0,0, 0.6)"
    //"rgba(54, 162, 235, 0.4)",
    //"rgba(255, 206, 86, 0.4)",
    //"rgba(75, 192, 192, 0.4)"
  ]);

  let myPatterns3 = pattern.generate([
    "rgba(255, 99, 132, 0.6)",
    "rgba(255, 99, 132, 0.4)",
    "rgba(255, 99, 132, 0.2)"
    //"rgba(54, 162, 235, 0.4)",
    //"rgba(255, 206, 86, 0.4)"
  ]);

// get work_interfere (i=7) & treatment (i=6) arrays

function grabColByIndex(dataset, i) {
    let col = [];
    dataset.forEach((row, index) => {
        if (index > 0)
        col.push(row[i]);
    })
    return col;
}

function getDistinct(col) {
    let distinctAnswers = [...new Set(col)];
    return distinctAnswers; 
}

function countDistinct(distinctAnswers, col) {
    let totals = [];
    distinctAnswers.forEach((distinctAnswer) => {
        let results = col.filter(answer => answer === distinctAnswer);
        totals.push(results);
    })
    return totals;
}


function filterDataBy(data, index, valueWeWant) {
    // in the dataset, filter by if row at index equals a certain thing
    //let results = col.filter(answer => answer === distinctAnswer);
    let filteredData = [];
    data.forEach((row) => {
        if (row[index] === valueWeWant) {
            filteredData.push(row);
        }
    })
    return filteredData;
}


function createBarChart(title, labels, data) {
    let chart = new Chart(ctx, {
        // The type of chart we want to create
        type: 'bar',
    
        // The data for our dataset
        data: {
            labels: labels,
            datasets: [{
                label: 'Yes',
                backgroundColor: myPatterns1,
                // backgroundColor: 'rgb(255, 99, 132)',
                // borderColor: 'rgb(255, 99, 132)',
                data: data
            }]
        },
    
        // Configuration options go here
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            title: {
                display: true,
                text: title
            }
        }
    });
}

function createHorizBarChart(title, labels, data) {
    let chart = new Chart(ctx2, {
        // The type of chart we want to create
        type: 'bar',
    
        // The data for our dataset
        data: {
            labels: labels,
            datasets: [{
                label: 'Often',
                backgroundColor: myPatterns2,
                //backgroundColor: 'rgb(255, 99, 132)',
                // borderColor: 'rgb(255, 99, 132)',
                data: data
            }]
        },
    
        // Configuration options go here
        options: {
            layout: {
                padding: {
                    left: 20,
                    right: 20,
                    top: 0,
                    bottom: 0
                }
            },
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            title: {
                display: true,
                text: title
            }
        }
    });
}

function createDoughnutChart(title, labels, data) {
    let chart = new Chart(ctx3, {
        // The type of chart we want to create
        type: 'doughnut',
    
        // The data for our dataset
        data: {
            labels: labels,
            datasets: [{
                //label: 'My First dataset',
                backgroundColor: myPatterns3,
                // backgroundColor: 'rgb(255, 99, 132)',
                // borderColor: 'rgb(255, 99, 132)',
                data: data
            }]
        },
    
        // Configuration options go here
        options: {
            title: {
                display: true,
                text: title
            }
        }
    });
}

//let dataset = results.data;
//console.log(dataset)

/*
const benefits = [
    `Yes`,
    `No`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `No`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `No`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Don't know`,
    `Yes`,
    `No`,
    `No`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `No`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `No`,
    `Don't know`,
    `No`,
    `Don't know`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Don't know`,
    `No`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `No`,
    `Yes`,
    `No`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `No`,
    `No`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `No`,
    `No`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `No`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `No`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `No`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `No`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `No`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `No`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `No`,
    `No`,
    `No`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `No`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `No`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `No`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `No`,
    `Don't know`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `Yes`,
    `No`,
    `Yes`,
    `No`,
    `No`,
    `Don't know`,
    `Don't know`,
    `Don't know`,
    `Yes`,
    `Don't know`,
    `Yes`,
    `No`,
    `Don't know`,
    `No`,
    `Yes`,
    `No`,
    `Yes`,
    `No`,
    `Yes`,
    `No`
    ]


const seek_help = [
`Yes`,
`No`,
`No`,
`No`,
`No`,
`Don't know`,
`No`,
`Yes`,
`Yes`,
`No`,
`Don't know`,
`Don't know`,
`No`,
`Don't know`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`Don't know`,
`No`,
`Yes`,
`Don't know`,
`No`,
`Don't know`,
`No`,
`No`,
`Don't know`,
`No`,
`No`,
`No`,
`No`,
`No`,
`Yes`,
`Yes`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`No`,
`Yes`,
`Yes`,
`Don't know`,
`Don't know`,
`No`,
`No`,
`Don't know`,
`Don't know`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`Yes`,
`Don't know`,
`Yes`,
`Yes`,
`Yes`,
`Yes`,
`Yes`,
`No`,
`No`,
`No`,
`Don't know`,
`No`,
`No`,
`Yes`,
`Yes`,
`No`,
`No`,
`No`,
`Yes`,
`Don't know`,
`No`,
`Yes`,
`Don't know`,
`No`,
`No`,
`No`,
`Don't know`,
`Don't know`,
`No`,
`Don't know`,
`Don't know`,
`Yes`,
`No`,
`No`,
`Don't know`,
`No`,
`No`,
`Yes`,
`No`,
`No`,
`Yes`,
`No`,
`Don't know`,
`No`,
`Don't know`,
`No`,
`No`,
`No`,
`No`,
`Yes`,
`No`,
`Yes`,
`Don't know`,
`Yes`,
`Don't know`,
`No`,
`No`,
`Don't know`,
`No`,
`No`,
`Don't know`,
`No`,
`No`,
`No`,
`Don't know`,
`Yes`,
`No`,
`No`,
`No`,
`No`,
`No`,
`Yes`,
`No`,
`Yes`,
`No`,
`Don't know`,
`Yes`,
`No`,
`Yes`,
`No`,
`Yes`,
`Yes`,
`Don't know`,
`No`,
`Don't know`,
`No`,
`Don't know`,
`Yes`,
`Don't know`,
`Don't know`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`Yes`,
`Don't know`,
`Yes`,
`No`,
`Yes`,
`No`,
`No`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`Yes`,
`No`,
`Yes`,
`Don't know`,
`Don't know`,
`Don't know`,
`Don't know`,
`No`,
`No`,
`No`,
`No`,
`Don't know`,
`No`,
`No`,
`Yes`,
`Yes`,
`No`,
`No`,
`No`,
`Don't know`,
`Yes`,
`Don't know`,
`Don't know`,
`No`,
`Yes`,
`No`,
`Yes`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`No`,
`Yes`,
`Yes`,
`Yes`,
`No`,
`No`,
`No`,
`No`,
`No`,
`No`,
`No`,
`No`,
`Yes`,
`No`,
`No`,
`Yes`,
`Don't know`,
`No`,
`Don't know`,
`Don't know`,
`No`,
`No`,
`Don't know`,
`Don't know`,
`Don't know`,
`Don't know`,
`No`,
`No`,
`No`,
`No`,
`Yes`,
`No`,
`Don't know`,
`Yes`,
`No`,
`No`,
`Yes`,
`No`,
`No`,
`Don't know`,
`Don't know`,
`No`,
`No`,
`No`,
`No`,
`Yes`,
`Yes`,
`No`,
`Yes`,
`Yes`,
`Yes`,
`Don't know`,
`Don't know`,
`No`
]
    
const age = [
        37,
        35,
        42,
        42,
        29,
        35,
        40,
        38,
        26,
        23,
        31,
        34,
        29,
        25,
        26,
        44,
        29,
        30,
        29,
        25,
        33,
        23,
        34,
        32,
        45,
        26,
        28,
        35,
        38,
        32,
        35,
        27,
        34,
        40,
        32,
        32,
        27,
        29,
        34,
        37,
        28,
        29,
        23,
        27,
        37,
        23,
        26,
        38,
        26,
        24,
        30,
        23,
        31,
        28,
        37,
        22,
        24,
        30,
        29,
        33,
        25,
        25,
        25,
        33,
        22,
        32,
        21,
        27,
        25,
        26,
        27,
        25,
        33,
        40,
        24,
        32,
        30,
        31,
        26,
        30,
        28,
        26,
        24,
        24,
        27,
        23,
        33,
        26,
        33,
        26,
        42,
        39,
        30,
        18,
        28,
        24,
        23,
        25,
        38,
        35,
        33,
        25,
        38,
        23,
        41,
        31,
        27,
        27,
        22,
        26,
        31,
        28,
        23,
        29,
        27,
        32,
        27,
        26,
        40,
        29,
        24,
        31,
        23,
        31,
        28,
        24,
        34,
        29,
        31,
        26,
        22,
        34,
        20,
        26,
        29,
        29,
        21,
        23,
        33,
        27,
        28,
        39,
        37,
        29,
        38,
        37,
        27,
        33,
        36,
        27,
        31,
        37,
        35,
        22,
        32,
        35,
        30,
        28,
        40,
        36,
        36,
        39,
        40,
        48,
        29,
        29,
        24,
        47,
        31,
        32,
        23,
        25,
        25,
        24,
        25,
        22,
        35,
        31,
        36,
        26,
        33,
        37,
        34,
        39,
        30,
        31,
        26,
        44,
        33,
        24,
        38,
        26,
        46,
        30,
        25,
        40,
        31,
        34,
        28,
        29,
        26,
        26,
        23,
        28,
        29,
        39,
        27,
        37,
        30,
        34,
        28,
        33,
        35,
        33,
        33,
        45,
        20,
        42,
        36,
        27,
        26,
        34,
        46,
        32,
        40,
        26,
        25,
        72,
        35,
        28,
        27,
        56,
        31,
        34,
        35,
        28,
        34,
        41,
        23,
        32,
        23,
        43,
        32,
        41,
        46
    ]

const mental_health_consequence = [
`No`,
`Maybe`,
`Maybe`,
`Yes`,
`No`,
`No`,
`Maybe`,
`No`,
`No`,
`No`,
`Maybe`,
`Yes`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`Maybe`,
`Maybe`,
`Maybe`,
`Yes`,
`No`,
`Maybe`,
`No`,
`No`,
`No`,
`Maybe`,
`No`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`No`,
`Maybe`,
`No`,
`Yes`,
`No`,
`No`,
`Maybe`,
`No`,
`No`,
`No`,
`Maybe`,
`Maybe`,
`Maybe`,
`Maybe`,
`No`,
`Maybe`,
`No`,
`Maybe`,
`Maybe`,
`No`,
`No`,
`No`,
`Yes`,
`No`,
`Maybe`,
`Maybe`,
`Maybe`,
`Maybe`,
`Yes`,
`No`,
`Maybe`,
`No`,
`Maybe`,
`No`,
`Maybe`,
`Yes`,
`Yes`,
`Maybe`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`Yes`,
`Yes`,
`No`,
`No`,
`Maybe`,
`Maybe`,
`No`,
`Yes`,
`Maybe`,
`Maybe`,
`No`,
`Yes`,
`Maybe`,
`Maybe`,
`Yes`,
`Yes`,
`Maybe`,
`Maybe`,
`Yes`,
`No`,
`Maybe`,
`Yes`,
`Maybe`,
`Yes`,
`No`,
`Maybe`,
`Maybe`,
`Maybe`,
`Maybe`,
`Maybe`,
`Yes`,
`Yes`,
`No`,
`Maybe`,
`No`,
`Yes`,
`Maybe`,
`Maybe`,
`Maybe`,
`Maybe`,
`No`,
`No`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`Yes`,
`No`,
`Maybe`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`No`,
`No`,
`Yes`,
`No`,
`Maybe`,
`Yes`,
`No`,
`Yes`,
`Yes`,
`No`,
`No`,
`No`,
`Yes`,
`Yes`,
`Maybe`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`Maybe`,
`Maybe`,
`No`,
`Yes`,
`Yes`,
`Yes`,
`Yes`,
`Maybe`,
`No`,
`Yes`,
`Maybe`,
`No`,
`Maybe`,
`Yes`,
`Yes`,
`Yes`,
`Maybe`,
`No`,
`No`,
`Yes`,
`No`,
`Maybe`,
`Yes`,
`Maybe`,
`Yes`,
`No`,
`No`,
`Yes`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`No`,
`Yes`,
`Yes`,
`Yes`,
`No`,
`Yes`,
`Maybe`,
`Yes`,
`Maybe`,
`Yes`,
`No`,
`No`,
`Yes`,
`Maybe`,
`Maybe`,
`Yes`,
`Yes`,
`No`,
`Yes`,
`Maybe`,
`Maybe`,
`No`,
`Yes`,
`No`,
`No`,
`Maybe`,
`Maybe`,
`Yes`,
`Yes`,
`No`,
`Maybe`,
`Yes`,
`No`,
`Yes`,
`Maybe`,
`No`,
`No`,
`Yes`,
`Maybe`,
`Maybe`,
`Maybe`,
`No`,
`Maybe`,
`Maybe`,
`No`,
`Maybe`,
`Maybe`,
`Maybe`,
`Maybe`,
`Yes`,
`No`,
`Maybe`,
`Maybe`,
`Yes`,
`Maybe`,
`Yes`,
`Maybe`,
`No`,
`No`,
`Maybe`,
`No`,
`No`,
`Maybe`,
`Yes`,
`Yes`,
]

//console.log(age[0]);
//console.log(ss.sampleCorrelation(age,benefits_to_num)) = 0.04;
//console.log(ss.max(age));



benefits_to_num = convertYesNo(benefits);
seek_help_to_num = convertYesNo(seek_help);
mental_health_consequence_to_num = convertYesNo(mental_health_consequence);
//console.log(benefits_to_num);

//console.log(ss.sampleCorrelation(age,benefits_to_num).toFixed(2)); 0.04
//console.log(ss.sampleCorrelation(age,seek_help_to_num).toFixed(2)); -0.01
//console.log(ss.sampleCorrelation(age,mental_health_consequence_to_num).toFixed(2)); .05
//console.log(ss.sampleCorrelation(benefits_to_num,mental_health_consequence_to_num).toFixed(2)); .06
console.log(ss.sampleCorrelation(seek_help_to_num,mental_health_consequence_to_num).toFixed(2));
*/

// Function to convert Yes/No answers to numbers for correlation
function convertYesNo(colArray) {
    colArray_to_num = colArray.map((answer) => {
        if (answer === 'Yes') {
            return 1;
        } else if (answer === 'No') {
            return 0;
        } else {
            return 2;
        }
    })
    return colArray_to_num;
}

// store array of index values where state is 'NA'
function storeNAi(array) {
    let NAindexes = [];
    array.forEach((state, i) => {
        if (state === 'NA') {
            NAindexes.push(i);
        }
    });
    console.log(NAindexes);
    return NAindexes;
}